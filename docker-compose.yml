## docker compose build 및 실행
## docker-compose up --build --force-recreate -d
## 빌드 / 강제 재빌드 / daemon - background 실행
## docker image 지우고 volume도 지우고
## docker-compose down --rmi all -v  
## container 삭제 / 사용된 image 모두 삭제 build image도 포함 / volume 삭제
## mongodb://root:rootpw@localhost:27017/mern_database?authSource=admin
## 외부 mongodbcompass에서 접근시 local의 mongod process가 중지된 상태에서 localhost에 접근. db-mongo는 내부 네트워크 소통용
services:
  db-mongo:
    image: mongo:latest
    container_name: database-mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpw
      MONGO_INITDB_DATABASE: mern_database
    ports:
      - "27017:27017" # host port : container port
    volumes:
      - mongo-data:/data/db # data 영속화위한 volume 연결
      - ./mongo-init:/docker-entrypoint-initdb.d  # 초기화 스크립트 마운트
      # - ./certs:/etc/ssl/certs
    # command: >
    #   mongod
    #   --tlsMode requireTLS
    #   --tlsCertificateKeyFile /etc/ssl/certs/mongodb.pem
    #   --tlsCAFile /etc/ssl/certs/ca.pem
      
    networks:
      - network-docker-compose
    restart: unless-stopped  # 컨테이너가 비정상 종료 시 재시작
  # backend (express.js & node.js)
  back-express:
    build:
      context: ./backend-express
      dockerfile: Dockerfile
    container_name: backend-express
    ports:
      - "5000:5000" # backend server port
    environment:
      - MONGO_URI=mongodb://root:rootpw@db-mongo:27017/mern_database?authSource=admin #MongoDB 연결 URI
      # - MONGO_URI=mongodb://root:rootpw@db-mongo:27017/?authSource=admin #MongoDB 연결 URI
      - NODE_ENV=development  # 개발 환경 변수 (필요 시 production으로 변경)
    depends_on: # service name. not container name
      - db-mongo # mongo db 준비후 실행
    networks:
      - network-docker-compose
    restart: unless-stopped  # 안정성 보장
    volumes:
      - ./backend-express:/app
      - /app/node_modules # local node_modules 충돌 방지
  front-react:
    build:
      context: ./frontend-react
      dockerfile: Dockerfile
    container_name: frontend-react
    ports:
      - "3000:3000"
    volumes:
      - ./frontend-react:/app
      - /app/node_modules  # 로컬 node_modules 충돌 방지
    environment:
      - CHOKIDAR_USEPOLLING=true  # 파일 변경 감지 강제 활성화
      - CHOKIDAR_INTERVAL=100  # (선택) 폴링 간격(ms) 조정
      - WATCHPACK_POLLING=true
      - WDS_SOCKET_PORT=0  # WSL 2 네트워크 문제 해결
      - REACT_APP_API_URL=http://localhost:5000  # 백엔드 API URL (프론트에서 사용)
      # - REACT_APP_API_URL=http://backend-express:5000  # 백엔드 API URL (프론트에서 사용)
    depends_on:
      - back-express
    networks:
      - network-docker-compose
    stdin_open: true  # 터미널 상호작용 활성화 (선택)
    tty: true         # 터미널 출력 개선 (선택)
    restart: unless-stopped  # 컨테이너가 비정상 종료 시 재시작
volumes:
  mongo-data:
networks:
  network-docker-compose:
    driver: bridge